require('dotenv').config();
const OpenAI = require('openai');
const axios = require('axios');

const config = require("./config.json");
const { Telegraf } = require('telegraf');
const { Markup } = require('telegraf');
const { message } = require('telegraf/filters');

const TELEGRAM_TOKEN = config.TELEGRAM_TOKEN;
const bot = new Telegraf(TELEGRAM_TOKEN, {handlerTimeout: 9_000_000});

const openai = new OpenAI({
  apiKey: config.OPENAI_API_KEY
});
const OPENAI_API_URL = "https://api.openai.com/v1/engines/davinci/completions";

/* –ü–ï–†–ï–ú–ï–ù–ù–´–ï */
let awaitingRewrite = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥
const userContexts = [];//–ö–æ–Ω—Ç–µ–∫—Å—Ç ChatGPT
let textsByUser = {};
const userData = {};//–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let usersInRewriteProcess = {};//–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—Ä–∞–π—Ç–∞

let tempMsgCnt;
let tempMsgCntId;

let numAtt = 1;

/* –ü–ï–†–ï–ú–ï–ù–ù–´–ï */

/* FUNCTIONS */
// rewrite function
async function rewriteText(rewrittenText, userId) {
  const usersAwaitingRewrite = Object.values(awaitingRewrite).filter(value => value).length;// –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥: ${usersAwaitingRewrite}`);
  try {

    const prompt = `–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–≥–∏–º (–Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å—Ç–∏–ª—å) –∏ –∫—Ä–∞—Ç–∫–∏–º (–±–ª–∏–∑–∫–∏–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–Ω—ã–º –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º, –∏–∑–±–µ–≥–∞—è –∏–∑–ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π:\n${rewrittenText}`;
    
    if (!userContexts[userId]) {
      userContexts[userId] = [];
    }
  
    userContexts[userId].push({
      "role": "user",
      "content": prompt
    });
    
    console.log("Starting OpenAI request...");
    const response = await openai.chat.completions.create({
      model: "gpt-4",
      messages: userContexts[userId],
      temperature: 0.2,
      max_tokens: 4096,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    }, {
      headers: {
          'Authorization': `Bearer ${config.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
      }
    });
    console.log("Finished OpenAI request.");
    
    return response.choices[0].message.content;
  } catch (error) {
      console.error('Error rewriting text:', error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞.";
  }
}
//checkUniqueness functions
async function checkUniqueness(rewrittenText, userId) {
  // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
  /* await delay(60000); */
  try {
    
    if (!userContexts[userId]) {
      userContexts[userId] = [];
    }
    // Check text.ru
    const API_URL = 'https://api.text.ru/post';
    const TEXT_TO_CHECK = rewrittenText ; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    const requestData = {
        userkey: config.TEXT_API_KEY, // –í–∞—à API –∫–ª—é—á
        text: TEXT_TO_CHECK,
        method: 'check_text_unic'
    };
    
    const responseText = await fetch(API_URL, {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    });

    const data = await responseText.json();
    const textUid = data.text_uid; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
    
    async function getCheckResult(textUid, maxAttempts = 100, delay = 5000) {
      let attempts = 0;
  
      while (attempts < maxAttempts) {
        const requestDataResult = {
          userkey: config.TEXT_API_KEY,
          uid: textUid,
          method: 'get_check_result'
        };
  
          const resultResponse = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestDataResult)
          });
  
          const resultData = await resultResponse.json();
  
          if (resultData && !resultData.error_code) {
              return resultData; // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          } else if (resultData.error_code === 181) {
              // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω, –∂–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
              await new Promise(resolve => setTimeout(resolve, delay));
              attempts++;
          } else {
              throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç text.ru: ${resultData.error_desc}`);
          }
      }
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    } 
  
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    let resultData;
    try {
        resultData = await getCheckResult(textUid);
        console.log(resultData);
    } catch (error) {
        console.error(error.message);
    }

    return resultData.text_unique;// –æ—Ç–≤–µ—Ç –æ—Ç text.ru –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–æ–∫–æ–π
    
  } catch (error) {
      console.error('Error checking uniqueness:', error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞.";
  }
}
/* async function checkUniquenessWithRetry(rewrittenText, userId, maxRetries) {
  for (let i = 0; i < maxRetries; i++) {
      try {
          const result = await checkUniqueness(rewrittenText, userId);
          return result; // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      } catch (error) {
          console.error(`Attempt ${i + 1} failed. Retrying in 60 seconds...`);
          if (i !== maxRetries - 1) { // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É
          } else { // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –æ–Ω–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å
              throw new Error('Failed after multiple retries');
          }
      }
  }
} */
/* function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
} */
const getUniquenessButton = (textUid) => {
  return Markup.inlineKeyboard([
    Markup.button.callback('üîµ –ü–û–ö–ê–ó–ê–¢–¨ –¢–ï–ö–°–¢ üîµ', `showText_${textUid}`)
  ]);
};
const getUniquenessButtonHide = (textUid) => {
  return Markup.inlineKeyboard([
    Markup.button.callback('üî¥ –°–ö–†–´–¢–¨ –¢–ï–ö–°–¢ üî¥', `hideMessage_${textUid}`)
  ]);
};
const getContinueButton = () => {
  return Markup.inlineKeyboard([
      Markup.button.callback('üü¢ –ü–†–û–î–û–õ–ñ–ò–¢–¨ REWRITE üü¢', 'continueRewrite')
  ]);
};
function generateUid(length = 10) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}
/* FUNCTIONS */

/* –°–û–ë–´–¢–ò–Ø */
bot.command('start', (ctx) => {  
  ctx.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω?");
});
bot.command('rewrite', (ctx) => {
  console.log('–ö–æ–º–∞–Ω–¥–∞ —Ä–µ—Ä–∞–π—Ç –ø—Ä–∏–Ω—è—Ç–∞');
  const chatId = ctx.chat.id;
  awaitingRewrite[chatId] = true;
  ctx.reply("–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ—Ä–∞–π—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.");
});
bot.command('clear', (ctx) => {
  const userId = ctx.from.id;
  if (userContexts[userId]) {
      userContexts[userId] = [
          {
              "role": "system",
              "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –ß–µ–º —è –º–æ–≥—É –±—ã—Ç—å –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω? \n"
          }
      ];
      ctx.reply('–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.');
  } else {
      ctx.reply('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.');
  }
});
bot.command('delete', async(ctx) => {
  console.log('–ö–æ–º–∞–Ω–¥–∞ "delete" –≤—ã–∑–≤–∞–Ω–∞');
  
  const userId = ctx.from.id;
  console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  userData[userId] = {
    originText:"",
    rewrittenText: "",
    awaitingRewrite: false,
    tempMsgCntId: null,
    numAtt: 0,
    textUid: null,//–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞
    textsByUser:[], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É,
  };//–£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  let res = await ctx.reply('deleting');
  console.log(res);

  const maxErrors = 30; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
  const maxMessagesToDelete = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  let errorCount = 0;

  for(let i = res.message_id; i >= res.message_id - maxMessagesToDelete && errorCount < maxErrors; i--) {//–£–¥–∞–ª—è–µ–º –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏–∑ —á–∞—Ç–∞
    console.log(`chat_id: ${userId}, message_id: ${i}`);
    try {
      let res = await ctx.telegram.deleteMessage(userId, i);
      console.log(res);
    } catch (e) {
      console.error(e);
      errorCount++;
    }
  }
  console.log('–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞');

  if (textsByUser[userId]) {
      delete textsByUser[userId];//–£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('–¢–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã');
  } else {
      console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }
  
  if (userContexts[userId]) {//–£–¥–∞–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
      delete userContexts[userId];
      console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
  } else {
      console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
  }

  console.log(userData);
  console.log(userContexts);
  console.log(textsByUser);
  ctx.reply('–ò—Å—Ç–æ—Ä–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.');
});
bot.action(/showText_(.+)/, async (ctx) => {
  try {
    const userId = ctx.from.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const textUid = ctx.match[1]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ textUid –∏–∑ callback query
    const text = userData[userId].textsByUser[textUid];

    if (!text) {
      throw new Error("Text not found");
    }

    ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    ctx.reply(text, getUniquenessButtonHide(textUid));
  } catch (error) {
    console.error("Error showing text:", error);
    ctx.answerCbQuery("‚ÄºÔ∏è –¢–µ–∫—Å—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞ –±–æ—Ç–∞ ‚ÄºÔ∏è");
  }
});
bot.action(/hideMessage_(.+)/, async (ctx) => {
  try {
    await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    ctx.answerCbQuery(); // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
  } catch (error) {
    console.error("Error hiding message:", error);
    ctx.answerCbQuery("‚ÄºÔ∏è –¢–µ–∫—Å—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞ –±–æ—Ç–∞ ‚ÄºÔ∏è");
  }
});
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;

    if (!userData[userId]) {
      userData[userId] = {
        originText:"",
        rewrittenText: "",
        awaitingRewrite: false,
        tempMsgCntId: null,
        numAtt: 0,
        textUid: null,//–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞
        textsByUser:[], // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É,
      };
    }

    if (usersInRewriteProcess[userId]) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—Ä–∞–π—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Rewrite.");
      return;
    }

    if (awaitingRewrite[userId]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥
      
      console.log(awaitingRewrite);
            
      userData[userId].originText = ctx.message.text;
      
      let tempMsg = await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å Rewrite –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ...'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let tempMsgId = tempMsg.message_id;

      usersInRewriteProcess[userId] = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ—Ä–∞–π—Ç–∞

      rewriteText(userData[userId].originText, userId).then(async (newRewrittenText) => {
        userData[userId].rewrittenText = await newRewrittenText;
        
        console.log("Generating UID...");
        userData[userId].textUid = generateUid(); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞ —é–∑–µ—Ä–∞
        console.log("Generated UID:", userData[userId].textUid );
        
        
        userData[userId].textsByUser[userData[userId].textUid] = userData[userId].rewrittenText;// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(userData[userId].textsByUser[userData[userId].textUid]);
  
        let uniquenessResult = await checkUniqueness(userData[userId].rewrittenText, userId);
        let uniquenessResultNum = Number(uniquenessResult);
        userData[userId].numAtt++; //—Å—á–µ—Ç—á–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        
        await ctx.reply(`–í–∞—Ä–∏–∞–Ω—Ç: ${userData[userId].numAtt}\n–¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω\n–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: ${uniquenessResultNum}%`, getUniquenessButton(userData[userId].textUid));
        await ctx.deleteMessage(tempMsgId);
        
        tempMsgCnt = await ctx.reply(`–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Rewrite?`, getContinueButton());
        tempMsgCntId = tempMsgCnt.message_id;
        
        userContexts[userId] = [];//–°–±—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        usersInRewriteProcess[userId] = false; // –°–±—Ä–æ—Å—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
        awaitingRewrite[userId] = false;//–∑–∞–∫—Ä—ã–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
        console.log(userData[userId]);
      }).catch(error => {
        console.error("Error during rewrite:", error);
        usersInRewriteProcess[userId] = false; // –°–±—Ä–æ—Å—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        awaitingRewrite[chatId] = false;
      });
    } else {
      let userMessage = ctx.message.text;
      // –õ–æ–≥–∏–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞ —Å OpenAI –∏ —Ç.–¥.)
      if (!userContexts[userId]) {
        userContexts[userId] = [];
      }
      userContexts[userId].push({
        "role": "user",
        "content": userMessage
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const tempMsg = await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...');
      const tempMsgId = tempMsg.message_id;

      const response = await openai.chat.completions.create({
          model: "gpt-4",
          messages: userContexts[userId],
          temperature: 0.2,
          max_tokens: 4096,
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
      });

      const reply = response.choices[0].message.content;
      const tokensUsed = response.usage.total_tokens;

      userContexts[userId].push({
        "role": "assistant",
        "content": reply
      });

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.deleteMessage(tempMsgId);
      ctx.reply(reply + `\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokensUsed}`);
    }

  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
    ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }     
});
bot.action('continueRewrite', async (ctx) => {
  const userId = ctx.from.id;
  console.log(userData[userId]);    
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (!awaitingRewrite.hasOwnProperty(userId)) {
    ctx.answerCbQuery("‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å Rewrite —Å–Ω–∞—á–∞–ª–∞ ‚ÄºÔ∏è");
    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  }
  ctx.answerCbQuery();
  // K–æ–¥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  try {
    await ctx.telegram.deleteMessage(ctx.chat.id, tempMsgCntId);
  } catch (err) {
    console.error("Could not delete message: ", err);
  }

  let tempMsg = await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å Rewrite –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ...');
  const tempMsgId = tempMsg.message_id;

  console.log("Starting rewriteText...");
  
  usersInRewriteProcess[userId] = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ—Ä–∞–π—Ç–∞
  awaitingRewrite[userId] = true;
  
  console.log("–¢–µ–∫—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥ —Ä–µ—Ä–∞–π—Ç–∞:" , userData[userId].rewrittenText);

  rewriteText(userData[userId].rewrittenText, userId).then(async (newRewrittenText) => {
    userData[userId].rewrittenText = await newRewrittenText;

    userData[userId].textUid = generateUid(); // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞ —é–∑–µ—Ä–∞

    userData[userId].textsByUser[userData[userId].textUid] = userData[userId].rewrittenText; // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(userData[userId].textsByUser[userData[userId].textUid]);

    let uniquenessResult = await checkUniqueness(userData[userId].rewrittenText, userId);
    let uniquenessResultNum = Number(uniquenessResult);
    userData[userId].numAtt++; //—Å—á–µ—Ç—á–∏–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    await ctx.reply(`–í–∞—Ä–∏–∞–Ω—Ç: ${userData[userId].numAtt}\n–¢–µ–∫—Å—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω\n–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: ${uniquenessResultNum}%`, getUniquenessButton(userData[userId].textUid));
    await ctx.deleteMessage(tempMsgId);
    
    tempMsgCnt = await ctx.reply(`–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Rewrite?`, getContinueButton());
    tempMsgCntId = tempMsgCnt.message_id;
    userContexts[userId] = [];//–°–±—Ä–æ—Å–∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    usersInRewriteProcess[userId] = false; // –°–±—Ä–æ—Å—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
    awaitingRewrite[userId] = false;//–∑–∞–∫—Ä—ã–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
    console.log(userData[userId]);
  }).catch(error => {
    console.error("Error during rewrite:", error);
    usersInRewriteProcess[userId] = false; // –°–±—Ä–æ—Å—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    awaitingRewrite[userId] = false;//–∑–∞–∫—Ä—ã–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ—Ä–∞–π—Ç–∞
  });
});

/* –°–û–ë–´–¢–ò–Ø */

bot.launch();


/* –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–µ–π—á–∞—Å —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏—Å–Ω–µ—Ç)*/
